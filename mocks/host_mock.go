// Code generated by MockGen. DO NOT EDIT.
// Source: interfaces/host_interface.go

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	io "io"
	reflect "reflect"
	time "time"

	gomock "github.com/golang/mock/gomock"
	go_libp2p_crypto "github.com/libp2p/go-libp2p-crypto"
	go_libp2p_peerstore "github.com/libp2p/go-libp2p-peerstore"
	"github.com/runletapp/crabfs/interfaces"
	protos "github.com/runletapp/crabfs/protos"
)

// MockHost is a mock of Host interface
type MockHost struct {
	ctrl     *gomock.Controller
	recorder *MockHostMockRecorder
}

// MockHostMockRecorder is the mock recorder for MockHost
type MockHostMockRecorder struct {
	mock *MockHost
}

// NewMockHost creates a new mock instance
func NewMockHost(ctrl *gomock.Controller) *MockHost {
	mock := &MockHost{ctrl: ctrl}
	mock.recorder = &MockHostMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockHost) EXPECT() *MockHostMockRecorder {
	return m.recorder
}

// Announce mocks base method
func (m *MockHost) Announce() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Announce")
	ret0, _ := ret[0].(error)
	return ret0
}

// Announce indicates an expected call of Announce
func (mr *MockHostMockRecorder) Announce() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Announce", reflect.TypeOf((*MockHost)(nil).Announce))
}

// GetSwarmPublicKey mocks base method
func (m *MockHost) GetSwarmPublicKey(ctx context.Context, hash string) (*go_libp2p_crypto.RsaPublicKey, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSwarmPublicKey", ctx, hash)
	ret0, _ := ret[0].(*go_libp2p_crypto.RsaPublicKey)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSwarmPublicKey indicates an expected call of GetSwarmPublicKey
func (mr *MockHostMockRecorder) GetSwarmPublicKey(ctx, hash interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSwarmPublicKey", reflect.TypeOf((*MockHost)(nil).GetSwarmPublicKey), ctx, hash)
}

// Publish mocks base method
func (m *MockHost) Publish(ctx context.Context, filename string, blockMap interfaces.BlockMap, mtime time.Time, size int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Publish", ctx, filename, blockMap, mtime, size)
	ret0, _ := ret[0].(error)
	return ret0
}

// Publish indicates an expected call of Publish
func (mr *MockHostMockRecorder) Publish(ctx, filename, blockMap, mtime, size interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Publish", reflect.TypeOf((*MockHost)(nil).Publish), ctx, filename, blockMap, mtime, size)
}

// GetContent mocks base method
func (m *MockHost) GetContent(ctx context.Context, filename string) (interfaces.BlockMap, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetContent", ctx, filename)
	ret0, _ := ret[0].(interfaces.BlockMap)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetContent indicates an expected call of GetContent
func (mr *MockHostMockRecorder) GetContent(ctx, filename interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetContent", reflect.TypeOf((*MockHost)(nil).GetContent), ctx, filename)
}

// FindProviders mocks base method
func (m *MockHost) FindProviders(ctx context.Context, blockMeta *protos.BlockMetadata) <-chan go_libp2p_peerstore.PeerInfo {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindProviders", ctx, blockMeta)
	ret0, _ := ret[0].(<-chan go_libp2p_peerstore.PeerInfo)
	return ret0
}

// FindProviders indicates an expected call of FindProviders
func (mr *MockHostMockRecorder) FindProviders(ctx, blockMeta interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindProviders", reflect.TypeOf((*MockHost)(nil).FindProviders), ctx, blockMeta)
}

// CreateBlockStream mocks base method
func (m *MockHost) CreateBlockStream(ctx context.Context, blockMeta *protos.BlockMetadata, peer *go_libp2p_peerstore.PeerInfo) (io.Reader, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateBlockStream", ctx, blockMeta, peer)
	ret0, _ := ret[0].(io.Reader)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateBlockStream indicates an expected call of CreateBlockStream
func (mr *MockHostMockRecorder) CreateBlockStream(ctx, blockMeta, peer interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateBlockStream", reflect.TypeOf((*MockHost)(nil).CreateBlockStream), ctx, blockMeta, peer)
}

// GetID mocks base method
func (m *MockHost) GetID() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetID")
	ret0, _ := ret[0].(string)
	return ret0
}

// GetID indicates an expected call of GetID
func (mr *MockHostMockRecorder) GetID() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetID", reflect.TypeOf((*MockHost)(nil).GetID))
}

// GetAddrs mocks base method
func (m *MockHost) GetAddrs() []string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAddrs")
	ret0, _ := ret[0].([]string)
	return ret0
}

// GetAddrs indicates an expected call of GetAddrs
func (mr *MockHostMockRecorder) GetAddrs() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAddrs", reflect.TypeOf((*MockHost)(nil).GetAddrs))
}

// Reprovide mocks base method
func (m *MockHost) Reprovide(ctx context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Reprovide", ctx)
	ret0, _ := ret[0].(error)
	return ret0
}

// Reprovide indicates an expected call of Reprovide
func (mr *MockHostMockRecorder) Reprovide(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Reprovide", reflect.TypeOf((*MockHost)(nil).Reprovide), ctx)
}
