// Code generated by MockGen. DO NOT EDIT.
// Source: interfaces/garbage_collector_interface.go

// Package mocks is a generated GoMock package.
package mocks

import (
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
	sync "sync"
)

// MockGarbageCollector is a mock of GarbageCollector interface
type MockGarbageCollector struct {
	ctrl     *gomock.Controller
	recorder *MockGarbageCollectorMockRecorder
}

// MockGarbageCollectorMockRecorder is the mock recorder for MockGarbageCollector
type MockGarbageCollectorMockRecorder struct {
	mock *MockGarbageCollector
}

// NewMockGarbageCollector creates a new mock instance
func NewMockGarbageCollector(ctrl *gomock.Controller) *MockGarbageCollector {
	mock := &MockGarbageCollector{ctrl: ctrl}
	mock.recorder = &MockGarbageCollectorMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockGarbageCollector) EXPECT() *MockGarbageCollectorMockRecorder {
	return m.recorder
}

// Start mocks base method
func (m *MockGarbageCollector) Start() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Start")
	ret0, _ := ret[0].(error)
	return ret0
}

// Start indicates an expected call of Start
func (mr *MockGarbageCollectorMockRecorder) Start() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Start", reflect.TypeOf((*MockGarbageCollector)(nil).Start))
}

// Schedule mocks base method
func (m *MockGarbageCollector) Schedule() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Schedule")
	ret0, _ := ret[0].(error)
	return ret0
}

// Schedule indicates an expected call of Schedule
func (mr *MockGarbageCollectorMockRecorder) Schedule() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Schedule", reflect.TypeOf((*MockGarbageCollector)(nil).Schedule))
}

// Collect mocks base method
func (m *MockGarbageCollector) Collect() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Collect")
	ret0, _ := ret[0].(error)
	return ret0
}

// Collect indicates an expected call of Collect
func (mr *MockGarbageCollectorMockRecorder) Collect() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Collect", reflect.TypeOf((*MockGarbageCollector)(nil).Collect))
}

// Locker mocks base method
func (m *MockGarbageCollector) Locker() sync.Locker {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Locker")
	ret0, _ := ret[0].(sync.Locker)
	return ret0
}

// Locker indicates an expected call of Locker
func (mr *MockGarbageCollectorMockRecorder) Locker() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Locker", reflect.TypeOf((*MockGarbageCollector)(nil).Locker))
}
