// Code generated by MockGen. DO NOT EDIT.
// Source: interfaces/bucket_interface.go

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	io "io"
	reflect "reflect"
	time "time"

	gomock "github.com/golang/mock/gomock"
	"github.com/runletapp/crabfs/interfaces"
)

// MockBucket is a mock of Bucket interface
type MockBucket struct {
	ctrl     *gomock.Controller
	recorder *MockBucketMockRecorder
}

// MockBucketMockRecorder is the mock recorder for MockBucket
type MockBucketMockRecorder struct {
	mock *MockBucket
}

// NewMockBucket creates a new mock instance
func NewMockBucket(ctrl *gomock.Controller) *MockBucket {
	mock := &MockBucket{ctrl: ctrl}
	mock.recorder = &MockBucketMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockBucket) EXPECT() *MockBucketMockRecorder {
	return m.recorder
}

// Get mocks base method
func (m *MockBucket) Get(ctx context.Context, filename string) (interfaces.Fetcher, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", ctx, filename)
	ret0, _ := ret[0].(interfaces.Fetcher)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get
func (mr *MockBucketMockRecorder) Get(ctx, filename interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockBucket)(nil).Get), ctx, filename)
}

// Put mocks base method
func (m *MockBucket) Put(ctx context.Context, filename string, file io.Reader, mtime time.Time) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Put", ctx, filename, file, mtime)
	ret0, _ := ret[0].(error)
	return ret0
}

// Put indicates an expected call of Put
func (mr *MockBucketMockRecorder) Put(ctx, filename, file, mtime interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Put", reflect.TypeOf((*MockBucket)(nil).Put), ctx, filename, file, mtime)
}

// Remove mocks base method
func (m *MockBucket) Remove(ctx context.Context, filename string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Remove", ctx, filename)
	ret0, _ := ret[0].(error)
	return ret0
}

// Remove indicates an expected call of Remove
func (mr *MockBucketMockRecorder) Remove(ctx, filename interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Remove", reflect.TypeOf((*MockBucket)(nil).Remove), ctx, filename)
}

// Chroot mocks base method
func (m *MockBucket) Chroot(dir string) interfaces.Bucket {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Chroot", dir)
	ret0, _ := ret[0].(interfaces.Bucket)
	return ret0
}

// Chroot indicates an expected call of Chroot
func (mr *MockBucketMockRecorder) Chroot(dir interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Chroot", reflect.TypeOf((*MockBucket)(nil).Chroot), dir)
}
